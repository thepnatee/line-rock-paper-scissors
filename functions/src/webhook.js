const {
    onRequest
} = require("firebase-functions/v2/https");
const line = require('../util/line.util');
const messages = require('../messages/messages');
const firebase = require('../util/firebase.util');

exports.receive = onRequest(async (req, res) => {

    if (req.method !== "POST") {
        return res.send(req.method);
    }

    if (!line.verifySignature(req.headers["x-line-signature"], req.body)) {
        return res.status(401).send("Unauthorized");
    }
    const events = req.body.events

    for (const event of events) {

        const userId = event.source.userId
        const groupId = event.source.groupId

        // Check Using LINE Chatbot with LINE Group Only
        if (event.source.type !== "group") {
            return res.end();
        }

        // Invite LINE Offcial Account : ‡πÄ‡∏õ‡πâ‡∏≤‡∏¢‡∏¥‡πâ‡∏á‡∏â‡∏∏‡∏ö
        // [IMPORTANT] Enable Toggle : Feature Allow account to join groups and multi-person chats
        // https://developers.line.biz/en/reference/messaging-api/#join-event
        if (event.type === "join") {
            await line.reply(event.replyToken, [messages.textMessageQuickReply("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏™‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏¢‡∏¥‡πâ‡∏á‡∏â‡∏∏‡∏ö‡∏Å‡∏±‡∏ô‡∏ô‡∏ô \n ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏î‡∏π ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤ ‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô ")])
            return res.end();
        }

        // Invite User Player 
        // https://developers.line.biz/en/reference/messaging-api/#member-joined-event
        if (event.type === "memberJoined") {
            for (let member of event.joined.members) {
                if (member.type === "user") {
                    // DB Query for Game Start 
                    const count = await firebase.getCountGameGroupStatus(groupId, false)
                    // Check Status Playing 
                    if (count === 0) {
                        await line.reply(event.replyToken, [messages.textMessageQuickReply("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏Å‡∏°‡∏™‡πå ")])
                    } else {
                        await line.reply(event.replyToken, [messages.textMessage("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")])
                    }
                }
            }
            return res.end();
        }

        // https://developers.line.biz/en/reference/messaging-api/#leave-event
        if (event.type === "leave") {
            // Delete Game Document when LINE OA Leave Group
            await firebase.deleteGameGroup(groupId)
            return res.end();
        }
        if (event.type === "message" && event.message.type === "text") {
            const lineProfile = await line.getProfile(userId)

            let textMessage = event.message.text
            if (textMessage === "‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤") {
                await line.reply(event.replyToken, [messages.ruleMessage()])
            } else if (textMessage === "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°") {
                await line.reply(event.replyToken, [messages.textMessageQuickReply(`‡∏Ñ‡∏∏‡∏ì ${lineProfile.data.displayName}‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏Å‡∏°‡∏™‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß `)])
            } else if (textMessage === "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏™‡πå") {
                await line.reply(event.replyToken, [messages.textMessageQuickReplyGame("‡∏ß‡∏£‡∏¢‡∏∏‡∏ó‡∏ò‡πÉ‡∏ï‡πâ‡∏´‡∏•‡πâ‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÅ‡∏û‡πâ‡∏ä‡∏ô‡∏∞‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß¬† \n ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡∏°‡∏™‡πå¬†‡∏Å‡∏î '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡∏™‡πå'¬†\n\n ‡∏´‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡∏™‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡∏ö‡πÑ‡∏î‡πâ")])
            } else if (textMessage === "‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì") {
                await firebase.deleteGameGroup(groupId)
                await line.reply(event.replyToken, [messages.textMessageQuickReplyGame(`‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏Ç‡∏≠‡∏á ${lineProfile.data.displayName} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)])
            } else if (textMessage === "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡∏™‡πå") {
                // Check Duplicate for Create Game 
                const count = await firebase.getCountGameGroupStatus(groupId, false)
                if (count === 0) {
                    const resultId = await firebase.createGame(userId, groupId)
                    await line.reply(event.replyToken, [messages.selectMessage(userId, groupId, resultId)])
                } else {
                    await line.reply(event.replyToken, [messages.textMessage("‡πÄ‡∏Å‡∏°‡∏™‡πå‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ")])
                }
            }
            return res.end();

        }
        if (event.type === "postback") {

            const data = JSON.parse(event.postback.data)

            if (data.item === "rock" || data.item === "paper" || data.item === "scissors") {
                const checkGameStatus = await firebase.getCheckGameGroupStatus(groupId, data.gameId)

                if (checkGameStatus) {
                    const result = await firebase.updateInsertOwnerSelect(groupId, data.gameId, data.item, userId)

                    if (result) {
                        if (result === "done") {
                            await line.reply(event.replyToken, [messages.textMessage("‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏£‡∏µ‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏ß‡∏ô!")])
                        }
                        return res.end();
                    } else {
                        const lineProfile = await line.getProfileGroup(groupId, userId)
                        await firebase.updateInsertJoinerSelect(groupId, data.gameId, data.item, userId)
                        await line.reply(event.replyToken, [messages.textMessage(`‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ${lineProfile.data.displayName} ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß!`)])
                    }
                }


            }
            if (data.item === "endgame") {
                const result = await firebase.endGame(groupId, userId, data.gameId)
                if (result) {

                    const dataItem = await firebase.getUserByGame(groupId, data.gameId, userId)
                    let userWin = []
                    let userEqual = []
                    let userLoss = []
                    let ownerLineProfile = await line.getProfileGroup(groupId, userId)
                    for (const [index, userObject] of dataItem.users.entries()) {
                        let memberId = Object.keys(userObject)[0];
                        let lineProfile = await line.getProfileGroup(groupId, memberId)

                        if ((userObject[memberId] === 'rock' && dataItem.ownerSelect === 'scissors') ||
                            (userObject[memberId] === 'paper' && dataItem.ownerSelect === 'rock') ||
                            (userObject[memberId] === 'scissors' && dataItem.ownerSelect === 'paper')) {
                            userWin.push(lineProfile.data)
                        } else if (
                            (userObject[memberId] === 'rock' && dataItem.ownerSelect === 'rock') ||
                            (userObject[memberId] === 'paper' && dataItem.ownerSelect === 'paper') ||
                            (userObject[memberId] === 'scissors' && dataItem.ownerSelect === 'scissors')
                        ) {
                            userEqual.push(lineProfile.data)

                        } else {
                            userLoss.push(lineProfile.data)
                        }
                    }

                    if (!dataItem.ownerSelect || dataItem.users.length === 0) {
                        await line.reply(event.replyToken, [messages.textMessageQuickReplyGame("‡πÄ‡∏Å‡∏°‡∏™‡πå‡πÑ‡∏î‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏°‡∏™‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")]);
                    } else {
                        let memberNo = 1
                        let nameList = '‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ' + ownerLineProfile.data.displayName + ' ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ' + dataItem.ownerSelect
                        if (userWin.length > 0) {
                            nameList += "\n-----‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà----- "
                            userWin.forEach((memberList) => {
                                nameList += " \n " + memberNo + "." + memberList.displayName + " ‚úÖ"
                                memberNo++
                            });
                        }
                         if (userEqual.length > 0) {
                            nameList += "\n-----‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà----- "
                            userEqual.forEach((memberList) => {
                                nameList += " \n " + memberNo + "." + memberList.displayName + " üòâ"
                                memberNo++
                            });
                        } 
                        if(userLoss.length > 0) {
                            nameList += "\n-----‡∏ú‡∏π‡πâ‡πÅ‡∏û‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà----- "
                            userLoss.forEach((memberList) => {
                                nameList += " \n " + memberNo + "." + memberList.displayName + " ‚ùå"
                                memberNo++
                            });
                        }

                        nameList += "\n------ \n "
                        nameList += "‡πÅ‡∏û‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏£‡∏∞ ‡∏Ñ‡∏ô‡∏ä‡∏ô‡∏∞‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠‡∏ô‡∏∞"

                        await line.reply(event.replyToken, [messages.textMessageQuickReply(nameList)]);
                    }


                } else {
                    await line.reply(event.replyToken, [messages.textMessage("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏Å‡∏°‡∏™‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏à‡∏à‡∏ö‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß")])
                }
            }

            return res.end();

        }

    }

    return res.send(req.method);

});